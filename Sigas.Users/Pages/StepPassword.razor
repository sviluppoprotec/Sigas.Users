@page "/steppassword"
@using Microsoft.AspNetCore.WebUtilities;
@using System.Text.RegularExpressions;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject IConfiguration configuration;
<h3>Reimposta password</h3>

<div class="container">
    <div class="row align-items-start" hidden="@(Sent)">
        <div class="col-12">
            @passwordMessage
        </div>
    </div>
    <div class="row align-items-start" hidden="@(Sent)">
        <div class="col-12 col-sm-12 col-md-3 col-lg-3">
            Password
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-lg-6">
            <input type="password" name="email" id="email" class="text-box" @bind="password" />
        </div>
    </div>
    <div class="row align-items-start" hidden="@(Sent)">
        <div class="col-12 col-sm-12 col-md-3 col-lg-3">
            Conferma
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-lg-6">
            <input type="password" name="email" id="email" class="text-box" @bind="password2" />
        </div>
        <div class="col-12 col-sm-12 col-md-3 col-lg-3">
            <button type="button" disabled="@Sending" @onclick="SendPassword">Invia</button>
        </div>
    </div>
    <div class="row align-items-start" hidden="@(!Sent)">
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            Password impostata
        </div>
    </div>

    <div class="row align-items-start" hidden="@(!Error)">
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            Errore nell'operazione: @message
        </div>
    </div>
</div>

@code {
    string password { get; set; } = string.Empty;
    string password2 { get; set; } = string.Empty;
    [Parameter]
    public string message { get; set; } = string.Empty;
    string token = "";
    string passwordMessage { get; set; } = "La password deve essere lunga almeno otto caratteri e contenere almeno una lettera maiuscola e un carattere speciale tra questi: #?!@$%^&*-";

    [Parameter]
    public bool Sent { get; set; } = false;
    [Parameter]
    public bool Error { get; set; } = false;

    [Parameter]
    public bool Sending { get; set; } = false;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            this.token = token.ToString();
        }
    }


    private async void SendPassword()
    {
        if(password != password2)
        {
            Error = true;
            message = "Password non corrispondenti";
            await InvokeAsync(StateHasChanged);
            return;
        }
        var regEx = new Regex("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$");
        if (!regEx.IsMatch(password))
        {
            Error = true;
            message = passwordMessage;
            await InvokeAsync(StateHasChanged);
            return;
        }
        Sending = true;
        await InvokeAsync(StateHasChanged);
        var res = await this.SavePassword(password, token);
        Sent = res.IsSuccess;
        Error = !Sent;
        if (Error)
        {
            message = res.Message;
        }
        Sending = false;
        // Call StateHasChanged to trigger a re-render of the page
        await InvokeAsync(StateHasChanged);
    }

}
